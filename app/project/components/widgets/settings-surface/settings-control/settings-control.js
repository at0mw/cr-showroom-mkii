/**
 * Copyright (C) 2023 to the present, Crestron Electronics, Inc.
 * All rights reserved.
 * No part of this software may be reproduced in any form, machine
 * or natural, without the express written consent of Crestron Electronics.
 * Use of this source code is subject to the terms of the Crestron Software License Agreement 
 * under which you licensed this source code.  
 *
 * This code was automatically generated by Crestron's code generation tool.
*/
/*jslint es6 */
/*global serviceModule, CrComLib */

const settingsControlInstanceModule = (id, elementIds) => {
    'use strict';    

    // BEGIN::CHANGEAREA - your initialization code for each instance of widget goes here  
    // console.log(`settingsControl-widget settingsControlInstanceModule("${id}", [${elementIds}])`);

    // choose one of the below 
    // -- id is container element added around template content
    // -- elementIds[0] is the first element found in the template content
    // -- in shell template, elementIds[0] is usually the right choice
    // const instance = document.getElementById(id);
    const instance = document.getElementById(elementIds[0]);

    // Your code for when widget instance removed from DOM here
    const cleanup = () => {
        // console.log(`settingsControl-widget settingsControlInstanceModule cleanup("${id}")`);
    };

    // Your code changing public interface to instance module here 
    return {
        id,
        elementIds,
        instance,
        cleanup
    };

    // END::CHANGEAREA  
} 

const settingsControlModule = (() => {
    'use strict';

    // BEGIN::CHANGEAREA - your initialization code for each instance of widget goes here  
   
    const widgetInstances = {};

    /**
     * Initialize Method
     */
    function onInit() {
       serviceModule.addEmulatorScenarioNoControlSystem("./app/project/components/widgets/settings-surface/settings-control/settings-control-emulator.json");
       // Uncomment the below line and comment the above to load the emulator all the time.
       // serviceModule.addEmulatorScenario("./app/project/components/widgets/settings-surface/settings-control/settings-control-emulator.json");
    }

    let deviceTab;
    let logTab;
    let ucTab;
    function setupStatics() {
        const radioButtons = document.querySelectorAll('input[name="settings-radio"]');

        // Add a click event listener to each radio button
        radioButtons.forEach((radioButton) => {
          radioButton.addEventListener('click', changeTabs);
        });
        
        deviceTab = document.getElementById('settings-device-status');
        logTab = document.getElementById('settings-log');
        ucTab = document.getElementById('settings-uc-engines');
    }

    function changeTabs(event) {
        const selectedValue = event.target.value;
            
        // You can now use the selectedValue to determine which radio button is selected
        //console.log(`Selected tab value: ${selectedValue}`);
        setAllHidden();
        switch(selectedValue) {
            case "1":
                setVisibleTab(true, false, false);
                break;
            case "2":
                setVisibleTab(false, true, false);
                break;
            case "3":
                setVisibleTab(false, false, true);
                break;
        }
    }

    function setAllHidden() {
        deviceTab.style.display = 'none';
        logTab.style.display = 'none';
        ucTab.style.display = 'none';
    }

    function setVisibleTab(deviceVisible, logVisible, ucVisible) {
        //console.log("Setting Device Visible ", deviceVisible);
        //console.log("Setting Log Visible ", logVisible);
        //console.log("Setting UC Visible ", ucVisible);
        if(deviceVisible) {
            deviceTab.style.display = 'block';
        } else if (logVisible) {
            logTab.style.display = 'block';
        } else if (ucVisible) {
            ucTab.style.display = 'block';
        }
    }

    /**
     * private method for widget class creation
     */
    let loadedSubId = CrComLib.subscribeState('o', 'ch5-import-htmlsnippet:settingsControl-import-widget', (value) => {
        if (value['loaded']) {
            onInit();
            setTimeout(() => {
                CrComLib.unsubscribeState('o', 'ch5-import-htmlsnippet:settingsControl-import-page', loadedSubId);
                loadedSubId = '';
            });
        }
    });

    /**
     * private method for widget instance addition and removal
     */
    CrComLib.subscribeState('o', 'ch5-template:settings-control-widget', (value) => {
        if (value['loaded'] !== undefined && value['id'] !== undefined) {
            if (value.loaded) {
                setupStatics();
                widgetInstances[value.id] = settingsControlInstanceModule(value.id, value['elementIds']);
            }
            else {
                const removedInstance = widgetInstances[value.id];
                if (removedInstance) {
                    removedInstance.cleanup();
                    delete widgetInstances[value.id];
                }
            }
        }
    });
    /**
     * All public method and properties are exported here
     */
    return {
        widgetInstances
    };

    // END::CHANGEAREA   

})();