/**
 * Copyright (C) 2023 to the present, Crestron Electronics, Inc.
 * All rights reserved.
 * No part of this software may be reproduced in any form, machine
 * or natural, without the express written consent of Crestron Electronics.
 * Use of this source code is subject to the terms of the Crestron Software License Agreement 
 * under which you licensed this source code.  
 *
 * This code was automatically generated by Crestron's code generation tool.
*/
/*jslint es6 */
/*global serviceModule, CrComLib */

const sourceControlInstanceModule = (id, elementIds) => {
    'use strict';    

    // BEGIN::CHANGEAREA - your initialization code for each instance of widget goes here  
    // console.log(`sourceControl-widget sourceControlInstanceModule("${id}", [${elementIds}])`);

    // choose one of the below 
    // -- id is container element added around template content
    // -- elementIds[0] is the first element found in the template content
    // -- in shell template, elementIds[0] is usually the right choice
    // const instance = document.getElementById(id);
    const instance = document.getElementById(elementIds[0]);

    // Your code for when widget instance removed from DOM here
    const cleanup = () => {
        // console.log(`sourceControl-widget sourceControlInstanceModule cleanup("${id}")`);
    };

    // Your code changing public interface to instance module here 
    return {
        id,
        elementIds,
        instance,
        cleanup
    };

    // END::CHANGEAREA  
} 

const sourceControlModule = (() => {
    'use strict';

    // BEGIN::CHANGEAREA - your initialization code for each instance of widget goes here  
   
    const widgetInstances = {};

    /**
     * Initialize Method
     */
    function onInit() {
    //    serviceModule.addEmulatorScenarioNoControlSystem("./app/project/components/widgets/source-control/source-control-emulator.json");
       // Uncomment the below line and comment the above to load the emulator all the time.
       serviceModule.addEmulatorScenario("./app/project/components/widgets/source-control/source-control-emulator.json");
    }

    function onLoaded(){
        const hdmiMediaButton = document.getElementById("hdmi-media:1");
        const airMediaButton = document.getElementById("air-media:2");
      
        hdmiMediaButton.addEventListener("click", handleButtonPress);
      
        airMediaButton.addEventListener("click", handleButtonPress);
        //console.log("Ended Mode Button Setup");
    }

    let activeSourceId;
    function handleButtonPress(event) {
        const targetButtonId = event.target.id;
        
        if(activeSourceId !== targetButtonId) {
            const splitSourceNumber = event.target.id.split(":");
            if (splitSourceNumber.length > 1 && !isNaN(splitSourceNumber[1])) {
                const sourceId = parseInt(splitSourceNumber[1], 10);
                changeMode(sourceId);            
            } else {
                console.error("Source Button has returned invalid source id");
            }
        } else {            
            changeMode(0);        
        }
    }

    function changeMode(newMode){
        sendSignal.sendAnalogSignal(analogJoins.SourceModeButton, newMode);
    }

    const modeSubscription = CrComLib.subscribeState('n', analogJoins.SourceModeButtonFb, (value) => {
        console.log("Feedback CrComLib :::: Source Buttons ::: Receiving Source Feedback :: Value: ", value);
        updateHeaderDisplay(value);
      });

    function updateHeaderDisplay(newMode){
        switch(newMode){
            case 1:
                updateActiveButton('hdmi-media:1');
                break;
            case 2:
                updateActiveButton('air-media:2');
                break;
            default:
                updateActiveButton();
                break;
        }
    }

    function updateActiveButton(activeButtonId){
        const buttons = document.querySelectorAll('.source-button');
        if(buttons){
            activeSourceId = null;
            buttons.forEach(button => {
              if (button.id === activeButtonId) {
                button.classList.add('button-toggle');
                activeSourceId = activeButtonId;
              } else {
                button.classList.remove('button-toggle');
              }
            });
        } else {
            console.error(`Buttons not yet available or not found.`);
        }
    }

    /**
     * private method for widget class creation
     */
    let loadedSubId = CrComLib.subscribeState('o', 'ch5-import-htmlsnippet:sourceControl-import-widget', (value) => {
        if (value['loaded']) {
            setTimeout(() => {
                CrComLib.unsubscribeState('o', 'ch5-import-htmlsnippet:sourceControl-import-page', loadedSubId);
                loadedSubId = '';
            });
        }
    });

    /**
     * private method for widget instance addition and removal
     */
    CrComLib.subscribeState('o', 'ch5-template:source-control-widget', (value) => {
        if (value['loaded'] !== undefined && value['id'] !== undefined) {
            if (value.loaded) {
                onInit();
                onLoaded();
                widgetInstances[value.id] = sourceControlInstanceModule(value.id, value['elementIds']);
            }
            else {
                const removedInstance = widgetInstances[value.id];
                if (removedInstance) {
                    removedInstance.cleanup();
                    delete widgetInstances[value.id];
                }
            }
        }
    });
    /**
     * All public method and properties are exported here
     */
    return {
        widgetInstances
    };

    // END::CHANGEAREA   

})();